boolean-1-true/false
byte-1-integer iputs
short-2
char-2
int - 4
long- 8
float- 4
double- 8



float var=760.98f;
double var=760.98;


boolean-1-true/false
byte-1-integer iputs
short-2
char-2
int - 4
long- 8
float- 4
double- 8



float var=760.98f;
double var=760.98;
int myv=(int) var;

switch(expression){//expression be int,char,String,enum)
	case value:
		stmt/s;
	case value:
		stmt/s;
	default:
		stmt/s;	
}
{
	"shell_cmd": "javac \"$file\"",
	"file_regex": "^(...*?):([0-9]*):?([0-9]*)",
	"selector": "source.java"
}



char []ch = new char[20];

ch[0] = 'y';
ch[1] = 'r';
ch[10] = 'n';

double []dr = {56.90, 45.87, 34.887};

new int[]{456, 88, 5422, 8888}  ----> Anonymus array


for(declaaration : nameOfAray){

}

for(int value : arr){
	System.out.println(value)
}

boolean - false
byte
short
int 
long-0

float
double-0.0

char-\u00(null character)





VAR-ARGS

void met(Type...identifier){

}

Rules for var args-----
1)method can only have one var args
2) it should be the last in the sequence


Garbage Collection
JVM -----> Garbage Collection
    -Nulling A Reference
    -Reassigning a Reference
    -when an object goes out of context


Enumerations, 1.5

enum identifier{Const1, Const2, Const3}

enum values{A, B, C}       // all the values are public static and final




Overriding- the overiding method's scope can be broader or same but cannot be narrowed down as that of overridden method


Abstract class cannot be instantiate

refernce variable of abstract classes and intefaces can be made


A super type reference variable can refer to an object of the sub class.

INterface ref. eat()  ------>  check first function is present in interface or not and then display the details of the object created.





Wrapper Class - when we want to use methods with primitive. we can't use directly we have to wrap them in the wrapper class.

boolean - Boolean
byte    - Byte
short   - Short
char    - Character
int     - Integer
long    - Long
float   - Float
double  - Double



wrapper---->primitive(automatcally) is called unbox....ing
primitive--->wrapper(automatically) is called autobox..ing



SCP - String Constant Pool




Throwable
	-Exception
		-IOException
			-FileNotFoundException
		-InterruptedException
		-....................
		-...................
		-RuntimeException
			-IndexOutOfBoundsException
				-ArrayIndexOutOfBoundsException
				-StringIndexOutOfBoundException
			-NullPointerException
			-NumberFormatException
			-ArithmeticException
			-....................
			-...................

	-Error
		-StackOverflowException
		-JVMOutOfMemoryException
	



ASSERTIONS
1) Really Simple Version
2) Simple Version


javac -source 1.3 AssertionsDemo.java

Do not use assertions on runtime methods
Do not use assertions on public methods




Thread
     -Thread Of Execution
     -An instance of the java.lang.Thread Class


Phases in the life cycle of the thread

1st Phase----->  Start(Not yet Alive ,Not Running)------>when POJO(Plain Old Java Object) is created
2nd Phase----->  Runnable(Alive,Not Running)-------> when start is called or entered the run method
3rd Phase----->  Running(Alive,Running)---------->Entered the run method

Optional Phase
Waiting/Suspend/Sleeping

4th Phase----->  Dead(Not Alive, Not Running)

The runnable is a functional interface------> Having only one method




Locks
	Synchronised


wait()
notify()
notifyAll()

all for objects
these are non static mehtods

for an object to be called wait it must have the lock of that object.
			------- METHOD wait() IS CALLED FROM THE SYNCHRONIZED OBJECT ONLY


	Collections 
		-Store Objects
		-Shrink Memory
		-Growable
		-Sortable
		-Searchable
	Ordering/Sorting

	3 Mahor interfaces 
	-List-----> When Duplicacy is not a concern
		-Vector, ArrayList(ordered but unsorted, LinkedList
	-Set------> When Duplicacy is a concern
		-HashSet(unordered and unsorted), TreeSet(Sorted and ordered), HashTable
	-Map------>When you want to store in key-values pairs
		-HashMap(unuordered and unsorted), TreeMap(Sorted and ordered)

Custom Sorting Collections
	-Comparable
		-public int compareTo(Object obj)
	-Comparator
		-public int comparator(Object obj1,Object obj2)